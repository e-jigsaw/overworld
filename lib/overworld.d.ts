// Generated by dts-bundle v0.2.0

declare module 'Overworld' {
    export import utils = require('__Overworld/overworld/utils/utils');
    export import Emittable = require('__Overworld/overworld/utils/emittable');
    export import Portal = require('__Overworld/overworld/portal');
    export import Context = require('__Overworld/overworld/context');
    export import setReact = utils.setReact;
    export var subscriber: (fn: any) => any;
}

declare module '__Overworld/overworld/utils/utils' {
    export function setReact(react: any): any;
    export function getReact(): any;
    export function createContainer(): any;
    export function createEmitter(): any;
    export function uuid(): string;
}

declare module '__Overworld/overworld/utils/emittable' {
    export = Emittable;
    var Emittable: {
        emit: (eventName: string, ...args: any[]) => void;
    };
}

declare module '__Overworld/overworld/portal' {
    class Portal {
        _linkMap: any;
        _caches: any;
        el: HTMLElement;
        constructor();
        getActiveEmitter(): any;
        link(name: any, world: any): void;
        mount(el: any): void;
        transition(name: any, props: any): Promise<any>;
        pushScene(name: any, props: any): Promise<{}>;
        popScene(resumeParams?: any): Promise<{}>;
        serialize(): {
            props: any;
            state: any;
            type: string;
        }[];
    }
    export = Portal;
}

declare module '__Overworld/overworld/context' {
    import Aggregator = require('__Overworld/overworld/aggregator');
    class Context {
        static aggregator: any;
        static component: any;
        static subscriber: Function;
        constructor();
        emitter: any;
        props: any;
        state: any;
        component: any;
        init(props: any, state: any): void;
        update(updater: any): void;
        aggregator: Aggregator<any, any, any>;
        pause(): void;
        resume(): void;
        dispose(): void;
        renderTo(templateProps: any, el: any, component?: any): Promise<any>;
        render(templateProps: any): any;
    }
    export = Context;
}

declare module '__Overworld/overworld/aggregator' {
    import IAggregator = require('__Overworld/overworld/interfaces/aggregator');
    class Aggregator<P, S, T> {
        aggregator: IAggregator<P, S, T>;
        constructor(aggregator: any);
        buildTemplateProps(props: P, forceState?: S): Promise<{
            props: P;
            state: S;
            templateProps: T;
        }>;
    }
    export = Aggregator;
}

declare module '__Overworld/overworld/interfaces/aggregator' {
    interface IAggregator<P, S, T> {
        initState?(props: P): Promise<S> | S;
        aggregate(props: P, state: S): Promise<T> | T;
    }
    export = IAggregator;
}

