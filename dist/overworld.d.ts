// Generated by dts-bundle v0.2.0

declare module 'Overworld' {
    export import utils = require('__Overworld/overworld/utils/utils');
    export import mixinFor = require('__Overworld/overworld/utils/mixin-for');
    export import Portal = require('__Overworld/overworld/portal');
    export import World = require('__Overworld/overworld/world');
    export import setReact = utils.setReact;
}

declare module '__Overworld/overworld/utils/utils' {
    export function setReact(react: any): any;
    export function getReact(): any;
    export function setImmutable(imm: any): any;
    export function getImmutable(): any;
    export function createContainer(): any;
    export function createEmitter(): any;
    export function uuid(): string;
}

declare module '__Overworld/overworld/utils/mixin-for' {
    function mixinFor(portal: any): {
        emit: (eventName: string, ...args: any[]) => void;
    };
    export = mixinFor;
}

declare module '__Overworld/overworld/portal' {
    class Portal {
        _linkMap: any;
        _caches: any;
        el: HTMLElement;
        constructor();
        getActiveEmitter(): any;
        link(name: any, world: any): void;
        mount(el: any): void;
        transition(name: any, props: any): Promise<any>;
        pushWorld(name: any, props: any): Promise<{}>;
        popWorld(resumeParams?: any): Promise<{}>;
        serialize(): {
            props: any;
            state: any;
            type: string;
        }[];
    }
    export = Portal;
}

declare module '__Overworld/overworld/world' {
    import Aggregator = require('__Overworld/overworld/aggregator');
    class World {
        static aggregator: any;
        static component: any;
        static subscriber: Function;
        constructor();
        emitter: any;
        props: any;
        state: any;
        component: any;
        init(props: any, state: any): void;
        update(state: any): void;
        aggregator: Aggregator<any, any, any>;
        pause(): void;
        resume(): void;
        dispose(): void;
        renderTo(templateProps: any, el: any, component?: any): Promise<any>;
        render(templateProps: any): any;
    }
    export = World;
}

declare module '__Overworld/overworld/aggregator' {
    class Aggregator<P, S, T> {
        constructor(aggregateFn: any);
        on(eventName: string, fn: Function): Aggregator<P, S, T>;
        initState(props: P): S;
        aggregate(props: P, state: S): any;
        buildTemplateProps(props: P, state?: S): Promise<{
            props: P;
            state: S;
            templateProps: T;
        }>;
    }
    export = Aggregator;
}

